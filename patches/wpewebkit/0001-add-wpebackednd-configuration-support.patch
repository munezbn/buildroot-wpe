--- a/Source/cmake/OptionsWPE.cmake	2019-04-25 21:57:33.500153730 +0530
+++ b/Source/cmake/OptionsWPE.cmake	2019-04-25 22:01:07.319917051 +0530
@@ -71,6 +71,8 @@
 WEBKIT_OPTION_DEFINE(USE_OPENVR "Whether to use OpenVR as WebVR backend." PRIVATE ${ENABLE_EXPERIMENTAL_FEATURES})
 WEBKIT_OPTION_DEFINE(USE_GSTREAMER_HOLEPUNCH "Whether to enable GStreamer holepunch" PRIVATE OFF)
 WEBKIT_OPTION_DEFINE(USE_EXTERNAL_HOLEPUNCH "Whether to enable external holepunch" PRIVATE OFF)
+WEBKIT_OPTION_DEFINE(USE_MINIBROWSER_BACKEND_DEFAULT "Whether to use default WPE backend for MiniBrowser." PRIVATE OFF)
+WEBKIT_OPTION_DEFINE(USE_MINIBROWSER_BACKEND_FDO "Whether to use FDO backend for MiniBrowser." PRIVATE OFF)

 if (CMAKE_SYSTEM_NAME MATCHES "Linux")
     WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEMORY_SAMPLER PRIVATE ON)
--- a/Tools/MiniBrowser/wpe/CMakeLists.txt	2019-04-25 22:01:47.502836136 +0530
+++ b/Tools/MiniBrowser/wpe/CMakeLists.txt	2019-04-25 22:08:23.416884188 +0530
@@ -8,22 +8,31 @@
     ${TOOLS_DIR}/wpe/backends/
     ${DERIVED_SOURCES_WPE_API_DIR}
     ${FORWARDING_HEADERS_WPE_DIR}
-    ${CMAKE_BINARY_DIR}/DerivedSources/WPEToolingBackends
 )

 set(MiniBrowser_SYSTEM_INCLUDE_DIRECTORIES
     ${WPE_INCLUDE_DIRS}
-    ${WPEBACKEND_FDO_INCLUDE_DIRS}
 )

 set(MiniBrowser_LIBRARIES
     ${JavaScriptCore_LIBRARY_NAME}
-    WPEToolingBackends
     WebKit
     ${WPE_LIBRARIES}
-    ${WPEBACKEND_FDO_LIBRARIES}
 )

+if(USE_MINIBROWSER_BACKEND_FDO)
+    list(APPEND MiniBrowser_INCLUDE_DIRECTORIES
+   ${CMAKE_BINARY_DIR}/DerivedSources/WPEToolingBackends
+    )
+    list(APPEND MiniBrowser_SYSTEM_INCLUDE_DIRECTORIES
+   ${WPEBACKEND_FDO_INCLUDE_DIRS}
+    )
+    list(APPEND MiniBrowser_LIBRARIES
+   WPEToolingBackends
+   ${WPEBACKEND_FDO_LIBRARIES}
+    )
+endif ()
+
 if (DEVELOPER_MODE)
     add_definitions(-DWEBKIT_INJECTED_BUNDLE_PATH="${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
 endif ()
--- a/Tools/PlatformWPE.cmake	2019-04-25 22:11:33.308412031 +0530
+++ b/Tools/PlatformWPE.cmake	2019-04-25 22:14:41.784328701 +0530
@@ -1,5 +1,7 @@
 if (DEVELOPER_MODE OR ENABLE_MINIBROWSER)
-    add_subdirectory(wpe/backends)
+    if (USE_MINIBROWSER_BACKEND_FDO)
+        add_subdirectory(wpe/backends)
+    endif ()
 endif ()

 if (DEVELOPER_MODE)
--- a/Tools/MiniBrowser/wpe/main.cpp	2019-04-25 22:15:23.217139133 +0530
+++ b/Tools/MiniBrowser/wpe/main.cpp	2019-04-26 07:00:55.977084949 +0530
@@ -24,9 +24,10 @@
  */

 #include "cmakeconfig.h"
-
+#if defined (USE_MINIBROWSER_BACKEND_FDO) && USE_MINIBROWSER_BACKEND_FDO
 #include "HeadlessViewBackend.h"
 #include "WindowViewBackend.h"
+#endif
 #if ENABLE_WEB_AUDIO || ENABLE_VIDEO
 #include <gst/gst.h>
 #endif
@@ -61,6 +62,7 @@
     { nullptr, 0, 0, G_OPTION_ARG_NONE, nullptr, nullptr, nullptr }
 };

+#if defined (USE_MINIBROWSER_BACKEND_FDO) && USE_MINIBROWSER_BACKEND_FDO
 class InputClient final : public WPEToolingBackends::ViewBackend::InputClient {
 public:
     InputClient(GMainLoop* loop, WebKitWebView* webView)
@@ -98,6 +100,7 @@
     GMainLoop* m_loop { nullptr };
     WebKitWebView* m_webView { nullptr };
 };
+#endif

 static WebKitWebView* createWebViewForAutomationCallback(WebKitAutomationSession*, WebKitWebView* view)
 {
@@ -122,12 +125,14 @@
     return TRUE;
 }

+#if defined (USE_MINIBROWSER_BACKEND_FDO) && USE_MINIBROWSER_BACKEND_FDO
 static std::unique_ptr<WPEToolingBackends::ViewBackend> createViewBackend(uint32_t width, uint32_t height)
 {
     if (headlessMode)
         return std::make_unique<WPEToolingBackends::HeadlessViewBackend>(width, height);
     return std::make_unique<WPEToolingBackends::WindowViewBackend>(width, height);
 }
+#endif

 typedef struct {
     GMainLoop* mainLoop { nullptr };
@@ -165,8 +170,12 @@

     auto* loop = g_main_loop_new(nullptr, FALSE);

+#if defined (USE_MINIBROWSER_BACKEND_FDO) && USE_MINIBROWSER_BACKEND_FDO
     auto backend = createViewBackend(1280, 720);
     struct wpe_view_backend* wpeBackend = backend->backend();
+#else
+    struct wpe_view_backend* wpeBackend = wpe_view_backend_create();
+#endif
     if (!wpeBackend) {
         g_warning("Failed to create WPE view backend");
         g_main_loop_unref(loop);
@@ -233,10 +242,14 @@
         "enable-encrypted-media", TRUE,
         nullptr);

+#if defined (USE_MINIBROWSER_BACKEND_FDO) && USE_MINIBROWSER_BACKEND_FDO
     auto* backendPtr = backend.get();
     auto* viewBackend = webkit_web_view_backend_new(wpeBackend, [](gpointer data) {
         delete static_cast<WPEToolingBackends::ViewBackend*>(data);
     }, backend.release());
+#else
+    auto* viewBackend = webkit_web_view_backend_new(wpeBackend, NULL, NULL);
+#endif

     auto* webView = WEBKIT_WEB_VIEW(g_object_new(WEBKIT_TYPE_WEB_VIEW,
         "backend", viewBackend,
@@ -247,7 +260,9 @@
         nullptr));
     g_object_unref(settings);

+#if defined (USE_MINIBROWSER_BACKEND_FDO) && USE_MINIBROWSER_BACKEND_FDO
     backendPtr->setInputClient(std::make_unique<InputClient>(loop, webView));
+#endif

     webkit_web_context_set_automation_allowed(webContext, automationMode);
     g_signal_connect(webContext, "automation-started", G_CALLBACK(automationStartedCallback), webView);
